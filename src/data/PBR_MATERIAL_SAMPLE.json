{
  "nodes": [
    {
      "canBeDeleted": false,
      "size": 0,
      "x": 760,
      "y": 200,
      "id": "a53c18bb-d92b-45d3-9ee7-3a0dcfd3bc17",
      "ambientInfluence": true,
      "shadingType": 1,
      "faceCulling": true,
      "depthTest": true,
      "cullBackFace": false,
      "blend": true,
      "blendFuncSource": "ONE_MINUS_SRC_COLOR",
      "blendFuncTarget": "ONE_MINUS_DST_ALPHA",
      "roughness": 1,
      "metallic": 0,
      "opacity": 1,
      "emission": [
        0,
        0,
        0
      ],
      "al": [
        0,
        0,
        0
      ],
      "name": "Material",
      "width": 107.6168212890625,
      "height": 184.14434814453125,
      "instance": "Material"
    },
    {
      "canBeDeleted": true,
      "size": 0,
      "x": 300,
      "y": 40,
      "id": "ALBEDO",
      "uniform": true,
      "_texture": {
        "registryID": "ALBEDO-SAMPLER"
      },
      "yFlip": false,
      "name": "TextureSample",
      "width": 107.6168212890625,
      "height": 93.74615478515625,
      "instance": "TextureSample",
      "texture": {
        "registryID": "ALBEDO-SAMPLER"
      }
    },
    {
      "canBeDeleted": true,
      "size": 0,
      "x": 300,
      "y": 240,
      "id": "METALLIC-ROUGHNESS",
      "uniform": true,
      "_texture": {
        "registryID": "METALLIC-ROUGHNESS-SAMPLER"
      },
      "yFlip": false,
      "name": "TextureSample",
      "width": 107.6168212890625,
      "height": 93.7462158203125,
      "instance": "TextureSample",
      "texture": {
        "registryID": "METALLIC-ROUGHNESS-SAMPLER"
      }
    },
    {
      "canBeDeleted": true,
      "size": 0,
      "x": 300,
      "y": 440,
      "id": "NORMAL",
      "uniform": true,
      "_texture": {
        "registryID": "NORMAL-SAMPLER"
      },
      "yFlip": false,
      "name": "TextureSample",
      "width": 107.6168212890625,
      "height": 93.74615478515625,
      "instance": "TextureSample",
      "texture": {
        "registryID": "NORMAL-SAMPLER"
      }
    }
  ],
  "links": [
    {
      "source": {
        "attribute": {
          "label": "RGB",
          "key": "rgb",
          "type": "vec3",
          "disabled": false,
          "nodeID": "ALBEDO"
        },
        "id": "ALBEDO"
      },
      "target": {
        "attribute": {
          "label": "Albedo",
          "key": "al",
          "accept": [
            "vec4",
            "vec3",
            "vec2",
            "float",
            "int"
          ],
          "type": 2,
          "disabled": false
        },
        "id": "a53c18bb-d92b-45d3-9ee7-3a0dcfd3bc17"
      }
    },
    {
      "source": {
        "attribute": {
          "label": "G",
          "key": "g",
          "type": "float",
          "color": "green",
          "disabled": false,
          "nodeID": "METALLIC-ROUGHNESS"
        },
        "id": "METALLIC-ROUGHNESS"
      },
      "target": {
        "attribute": {
          "label": "Roughness",
          "key": "roughness",
          "accept": [
            "vec4",
            "vec3",
            "vec2",
            "float",
            "int"
          ],
          "type": "float",
          "max": 1,
          "min": 0,
          "disabled": false
        },
        "id": "a53c18bb-d92b-45d3-9ee7-3a0dcfd3bc17"
      }
    },
    {
      "source": {
        "attribute": {
          "label": "B",
          "key": "b",
          "type": "float",
          "color": "blue",
          "disabled": false,
          "nodeID": "METALLIC-ROUGHNESS"
        },
        "id": "METALLIC-ROUGHNESS"
      },
      "target": {
        "attribute": {
          "label": "Metallic",
          "key": "metallic",
          "accept": [
            "vec4",
            "vec3",
            "vec2",
            "float",
            "int"
          ],
          "type": "float",
          "max": 1,
          "min": 0,
          "disabled": false
        },
        "id": "a53c18bb-d92b-45d3-9ee7-3a0dcfd3bc17"
      }
    },
    {
      "source": {
        "attribute": {
          "label": "RGB",
          "key": "rgb",
          "type": "vec3",
          "disabled": false,
          "nodeID": "NORMAL"
        },
        "id": "NORMAL"
      },
      "target": {
        "attribute": {
          "label": "Normal",
          "key": "normal",
          "accept": [
            "vec4",
            "vec3",
            "vec2",
            "float",
            "int"
          ],
          "disabled": false
        },
        "id": "a53c18bb-d92b-45d3-9ee7-3a0dcfd3bc17"
      }
    }
  ],
  "response": {
    "info": [
      {
        "key": "samplers",
        "label": "Texture samplers",
        "data": 0
      },
      {
        "key": "uniforms",
        "label": "Uniform quantity",
        "data": 3
      }
    ],
    "cubeMapShader": {
      "code": "\n            #version 300 es\n  \nprecision highp float;\n#define MAX_POINT_LIGHTS 24\n#define MAX_LIGHTS 2\n#define PI  3.14159265359 \n\nin vec4 vPosition;\nin  vec2 texCoord;\nin mat3 toTangentSpace;\nuniform int directionalLightsQuantity;\nuniform mat3 directionalLightsData[MAX_LIGHTS];\nuniform vec3 cameraVec;\nuniform mat4 pointLightData[MAX_POINT_LIGHTS];\nuniform int lightQuantity;\n\nin vec3 normalVec;\nin mat4 normalMatrix; \nin vec3 viewDirection;  \nuniform float elapsedTime;\nuniform int shadingModel;\n@import(ambientUniforms)\n\nuniform sampler2D sceneColor;\n\n// OUTPUTS\nout vec4 finalColor;\n        \n            uniform sampler2D sampler2;\nuniform sampler2D sampler3;\nuniform sampler2D sampler1;\n            \n            \n\n\n\n@import(fresnelSchlickRoughness)\n@import(forwardAmbient)\n\n \n  \n@import(fresnelSchlick)\n@import(geometrySchlickGGX)\n@import(distributionGGX)\n@import(geometrySmith)\n@import(computeDirectionalLight) \n@import(computePointLight)\n\n\n\nvoid main(){\n    vec4 TextureSample_1_S = texture(sampler1, texCoord);\nvec3 rgb1 = TextureSample_1_S.rgb;\nvec4 TextureSample_2_S = texture(sampler2, texCoord);\nfloat g2 = TextureSample_2_S.g;\nfloat b2 = TextureSample_2_S.b;\nvec4 TextureSample_3_S = texture(sampler3, texCoord);\nvec3 rgb3 = TextureSample_3_S.rgb;\n\n                vec4 gAlbedo = vec4(rgb1, 1.) + vec4(vec3(0.,0.,0.), 0.);\n                vec4 gNormal = vec4(normalize(toTangentSpace * ((rgb3 * 2.0)- 1.0)), 1.);\n                vec4 gBehaviour =  vec4(1.,g2,b2, 1.);\n                float opacity = 1.;\n                float refraction = 0.;\n            \n    vec3 fragPosition = vPosition.xyz;  \n    vec3 albedo = vec3(gAlbedo);\n    if(shadingModel != -1 && albedo.r <= 1. && albedo.g <= 1. && albedo.b <= 1.){       \n        float roughness = gBehaviour.g;\n        float metallic = gBehaviour.b;\n        float ao = gBehaviour.r;\n        vec3 N = vec3(gNormal); \n        \n        \n        vec3 V = normalize(cameraVec - fragPosition);\n        float NdotV    = max(dot(N, V), 0.000001);\n        vec3 F0 = vec3(0.04);\n        vec3 Lo = vec3(0.0);\n        F0 = mix(F0, albedo, metallic);\n        \n         for (int i = 0; i < directionalLightsQuantity; i++){\n                vec3 lightDir =  normalize(vec3(directionalLightsData[i][0][0], directionalLightsData[i][0][1],directionalLightsData[i][0][2]));\n                vec3 lightColor =  vec3(directionalLightsData[i][1][0], directionalLightsData[i][1][1],directionalLightsData[i][1][2]);    \n                Lo += computeDirectionalLight(\n                    V,\n                    F0,\n                    lightDir,\n                    lightColor,\n                    fragPosition,\n                    roughness,\n                    metallic,\n                    N,\n                    albedo\n                );\n        }\n     \n        for (int i = 0; i < lightQuantity; ++i){\n            vec4 currentLightData = computePointLights(pointLightData[i],  fragPosition, V, N, 1., roughness, metallic, albedo, F0, i);\n            Lo += currentLightData.rgb;    \n        }\n    \n       \n        Lo += computeAmbient(NdotV, metallic, roughness, albedo, F0, V, N, ambientLODSamples, brdfSampler, vPosition.rgb);\n        \n    \n        finalColor = vec4(Lo, opacity);\n    }\n    else\n       finalColor = vec4(albedo, opacity);        \n}\n        \n        "
    },
    "shader": "\n            \n#version 300 es\nprecision highp float;\n    \n#define PI  3.14159265359 \nin vec3 normalVec;\nin mat4 normalMatrix;\nin mat3 toTangentSpace;\nin vec3 viewDirection;\nin vec2 texCoord;\nin vec4 vPosition;\nuniform float elapsedTime;\n@import(ambientUniforms)\n\nuniform vec3 cameraVec;\nlayout (location = 0) out vec4 gPosition;\nlayout (location = 1) out vec4 gNormal;\nlayout (location = 2) out vec4 gAlbedo;    // R  G         B\nlayout (location = 3) out vec4 gBehaviour; // AO ROUGHNESS METALLIC\nlayout (location = 4) out vec4 gAmbient;\n\n\n            uniform sampler2D sampler2;\nuniform sampler2D sampler3;\nuniform sampler2D sampler1;\n            \n            \n    \n\n@import(fresnelSchlickRoughness)\n@import(ambient)\n\n \nvoid main(){\n    gPosition = vPosition;\n    vec4 TextureSample_1_S = texture(sampler1, texCoord);\nvec3 rgb1 = TextureSample_1_S.rgb;\nvec4 TextureSample_2_S = texture(sampler2, texCoord);\nfloat g2 = TextureSample_2_S.g;\nfloat b2 = TextureSample_2_S.b;\nvec4 TextureSample_3_S = texture(sampler3, texCoord);\nvec3 rgb3 = TextureSample_3_S.rgb;\n\n                 gAlbedo = vec4(rgb1, 1.) + vec4(vec3(0.,0.,0.), 0.);\n                 gNormal = vec4(normalize(toTangentSpace * ((rgb3 * 2.0)- 1.0)), 1.);\n                 gBehaviour =  vec4(1.,g2,b2, 1.);\n                \n                \n            \n    \n           \n        gAmbient = vec4( computeAmbient(cameraVec, gAlbedo.rgb,  vPosition.rgb, gNormal.rgb, gBehaviour.g, gBehaviour.b, ambientLODSamples, brdfSampler, vPosition.rgb), 1.);\n    \n}\n        \n        ",
    "vertexShader": "#version 300 es\n\nlayout (location = 1) in vec3 position;\nlayout (location = 2) in vec3 normal;\nlayout (location = 3) in vec2 uvTexture;\nlayout (location = 4) in vec3 tangentVec;\n\nuniform mat4 viewMatrix;\nuniform mat4 transformMatrix;\nuniform mat4 projectionMatrix;\nuniform vec3 cameraVec;\n\nout vec3 normalVec;\nout vec3 tangent;\nout vec3 bitangent;\n\nout vec4 vPosition;\nout vec2 texCoord;\n \nout mat3 toTangentSpace;\nout vec3 viewDirection;\n \n\nvoid main(){\n    vPosition =  transformMatrix *   vec4(position, 1.0);\n    \n    vec3 T = normalize( mat3(transformMatrix)  * normalize(tangentVec));\n    vec3 N =  normalize(mat3(transformMatrix) * normal);\n    vec3 biTangent = cross(N, tangentVec); \n    vec3 B =  normalize(mat3(transformMatrix) * biTangent);\n    B = dot(biTangent, B)  > 0. ? -B : B;\n    \n    bitangent = B;\n    tangent = T;\n    \n    toTangentSpace = mat3(T, B, N);\n    \n    viewDirection = transpose(toTangentSpace) * (vPosition.xyz - cameraVec);\n    texCoord = uvTexture;\n    \n    normalVec = N; \n   \n    gl_Position = projectionMatrix * viewMatrix * vPosition;\n}\n",
    "uniforms": [
      {
        "label": "TextureSample",
        "key": "sampler2",
        "value": "METALLIC-ROUGHNESS-SAMPLER",
        "type": "sampler2D"
      },
      {
        "label": "TextureSample",
        "key": "sampler3",
        "value": "NORMAL-SAMPLER",
        "type": "sampler2D"
      },
      {
        "label": "TextureSample",
        "key": "sampler1",
        "value": "ALBEDO-SAMPLER",
        "type": "sampler2D"
      }
    ],
    "uniformData": [
      {
        "key": "sampler2",
        "data": "METALLIC-ROUGHNESS-SAMPLER",
        "type": "sampler2D"
      },
      {
        "key": "sampler3",
        "data": "NORMAL-SAMPLER",
        "type": "sampler2D"
      },
      {
        "key": "sampler1",
        "data": "ALBEDO-SAMPLER",
        "type": "sampler2D"
      }
    ],
    "settings": {
      "shadingType": 1,
      "faceCulling": true,
      "depthTest": true,
      "blend": true
    }
  }
}